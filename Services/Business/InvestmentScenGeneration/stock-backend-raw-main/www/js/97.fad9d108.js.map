{"version":3,"file":"js/97.fad9d108.js","mappings":"0KAOA,MAAMA,EAAc,CAAC,KAAM,KAAM,KAAM,MAEjCC,EAAkB,KACfD,EAAYE,QAAO,CAACC,EAAOC,KAChCD,EAAMC,GAAO,CACXC,KAAM,CAACC,QAASC,OAAQC,QACxBC,SAAS,GAEJN,IACN,CAAC,GAPkB,GAUlBO,EAAc,KACXV,EAAYE,QAAO,CAACC,EAAOC,KAChCD,EAAM,UAAWQ,EAAAA,EAAAA,IAAWP,IAAQ,CAClCC,KAAM,CAACE,OAAQC,QACfC,QAAS,MAEJN,IACN,CAAC,GAPc,GAUdS,EAAa,KACVZ,EAAYE,QAAO,CAACC,EAAOC,KAChCD,EAAM,SAAUQ,EAAAA,EAAAA,IAAWP,IAAQ,CACjCC,KAAM,CAACE,OAAQC,QACfC,QAAS,MAEJN,IACN,CAAC,GAPa,GAUbU,EAAU,CACdC,IAAKC,OAAOC,KAAKf,GACjBgB,OAAQF,OAAOC,KAAKN,GACpBQ,MAAOH,OAAOC,KAAKJ,IAGrB,SAASO,EAAiBd,EAA4Be,EAAchB,GAClE,IAAIiB,EAAYhB,EAChB,GAAW,MAAPD,IAAuB,IAARA,EAAnB,CAGA,GAAIgB,EAAM,CACR,MAAME,EAAaF,EAAKG,QAAQlB,EAAM,IACtCgB,GAAa,IAAIC,GAClB,CAID,MAAa,QAATjB,GAA2B,KAARD,IAAsB,IAARA,GAKrCiB,GAAa,IAAIjB,IACViB,EAAUG,eAJRH,EAAUG,aAVlB,CAeF,CAED,MAAMC,EAAQ,IAAIC,IAElB,OAAeC,EAAAA,GAAAA,OAAW,CACxBC,KAAM,QACNC,YAAY,EACZ1B,MAAO,CACL2B,KAAM,CACJzB,KAAM,CAACC,QAASC,OAAQC,QACxBC,SAAS,MAERR,EACHgB,OAAQ,CACNZ,KAAM,CAACE,OAAQC,QACfC,QAAS,SAERC,EACHQ,MAAO,CACLb,KAAM,CAACE,OAAQC,QACfC,QAAS,SAERG,EACHmB,UAAW,CACT1B,KAAME,OACNE,QAAS,KACTuB,UAAYC,GAAa,CAAC,OAAQ,QAAS,MAAO,SAAU,WAAY,WAAWC,SAASD,IAE9FE,IAAK,CACH9B,KAAME,OACNE,QAAS,QAGb2B,OAAQC,GAAG,MAAElC,EAAF,KAASmC,EAAT,SAAeC,EAAf,OAAyBC,IAElC,IAAIC,EAAW,GACf,IAAK,MAAMrB,KAAQjB,EACjBsC,GAAYlC,OAAQJ,EAAciB,IAEpC,IAAIsB,EAAYjB,EAAMkB,IAAIF,GAE1B,IAAKC,EAAW,CAGd,IAAIrC,EACJ,IAAKA,KAHLqC,EAAY,GAGC7B,EACXA,EAAQR,GAAMuC,SAAQxB,IACpB,MAAMyB,EAAoC1C,EAAciB,GAClDC,EAAYF,EAAgBd,EAAMe,EAAMyB,GAC1CxB,GAAWqB,EAAWI,KAAKzB,EAAhB,IAInB,MAAM0B,EAAgBL,EAAUM,MAAK3B,GAAaA,EAAU4B,WAAW,UAEvEP,EAAUI,KAAK,CAEbhC,KAAMiC,IAAkB5C,EAAM2B,KAC9B,CAAC,OAAO3B,EAAM2B,QAAS3B,EAAM2B,KAC7B,CAAC,UAAU3B,EAAMc,UAAWd,EAAMc,OAClC,CAAC,SAASd,EAAMe,SAAUf,EAAMe,MAChC,CAAC,cAAcf,EAAM4B,aAAc5B,EAAM4B,YAG3CN,EAAMyB,IAAIT,EAAUC,EACrB,CAED,OAAOL,EAAElC,EAAMgC,KAAKgB,EAAAA,EAAAA,IAAUb,EAAM,CAAEc,MAAOV,IAAcH,EAC5D,G","sources":["webpack://stock-frontend/../../../src/components/VGrid/VCol.ts"],"sourcesContent":["import './VGrid.sass'\n\nimport Vue, { VNode, PropOptions } from 'vue'\nimport mergeData from '../../util/mergeData'\nimport { upperFirst } from '../../util/helpers'\n\n// no xs\nconst breakpoints = ['sm', 'md', 'lg', 'xl']\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['offset' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['order' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps),\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: boolean | string | number) {\n  let className = type\n  if (val == null || val === false) {\n    return undefined\n  }\n  if (prop) {\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase()\n  }\n  // .order-md-6\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst cache = new Map<string, any[]>()\n\nexport default Vue.extend({\n  name: 'v-col',\n  functional: true,\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false,\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null,\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null,\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: (str: any) => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str),\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n  render (h, { props, data, children, parent }): VNode {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = ''\n    for (const prop in props) {\n      cacheKey += String((props as any)[prop])\n    }\n    let classList = cache.get(cacheKey)\n\n    if (!classList) {\n      classList = []\n      // Loop through `col`, `offset`, `order` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string | number | boolean = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('col-'))\n\n      classList.push({\n        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n        col: !hasColClasses || !props.cols,\n        [`col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf,\n      })\n\n      cache.set(cacheKey, classList)\n    }\n\n    return h(props.tag, mergeData(data, { class: classList }), children)\n  },\n})\n"],"names":["breakpoints","breakpointProps","reduce","props","val","type","Boolean","String","Number","default","offsetProps","upperFirst","orderProps","propMap","col","Object","keys","offset","order","breakpointClass","prop","className","breakpoint","replace","toLowerCase","cache","Map","Vue","name","functional","cols","alignSelf","validator","str","includes","tag","render","h","data","children","parent","cacheKey","classList","get","forEach","value","push","hasColClasses","some","startsWith","set","mergeData","class"],"sourceRoot":""}