package org.spring.finance.utils.result;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class CodeLists {
    // 沪深300股票代码
    private static final List<String> CODES_HS300 = Arrays.asList
    //中证100股票代码
    private static final List<String> CODES_ZZ100 = Arrays.asList("000002.XSHE", "000063.XSHE", "000100.XSHE", "000301.XSHE", "000333.XSHE", "000338.XSHE", "000651.XSHE", "000661.XSHE", "000708.XSHE", "000725.XSHE", "000792.XSHE", "000938.XSHE", "001979.XSHE", "002027.XSHE", "002049.XSHE", "002129.XSHE", "002230.XSHE", "002241.XSHE", "002271.XSHE", "002352.XSHE", "002371.XSHE", "002410.XSHE", "002415.XSHE", "002460.XSHE", "002466.XSHE", "002475.XSHE", "002493.XSHE", "002555.XSHE", "002594.XSHE", "002601.XSHE", "002648.XSHE", "002709.XSHE", "002714.XSHE", "002812.XSHE", "300014.XSHE", "300015.XSHE", "300059.XSHE", "300122.XSHE", "300124.XSHE", "300142.XSHE", "300274.XSHE", "300347.XSHE", "300413.XSHE", "300450.XSHE", "300628.XSHE", "300661.XSHE", "300750.XSHE", "300760.XSHE", "300782.XSHE", "600010.XSHG", "600019.XSHG", "600028.XSHG", "600031.XSHG", "600036.XSHG", "600048.XSHG", "600050.XSHG", "600089.XSHG", "600111.XSHG", "600176.XSHG", "600219.XSHG", "600276.XSHG", "600309.XSHG", "600346.XSHG", "600406.XSHG", "600426.XSHG", "600436.XSHG", "600438.XSHG", "600519.XSHG", "600570.XSHG", "600585.XSHG", "600588.XSHG", "600690.XSHG", "600745.XSHG", "600893.XSHG", "600900.XSHG", "600905.XSHG", "600941.XSHG", "600989.XSHG", "601012.XSHG", "601088.XSHG", "601225.XSHG", "601318.XSHG", "601390.XSHG", "601398.XSHG", "601600.XSHG", "601668.XSHG", "601728.XSHG", "601766.XSHG", "601857.XSHG", "601888.XSHG", "601899.XSHG", "601919.XSHG", "601985.XSHG", "603259.XSHG", "603260.XSHG", "603501.XSHG", "603799.XSHG", "603986.XSHG", "603993.XSHG", "688981.XSHG");
    //中证500股票代码
    private static final List<String> CODES_ZZ500 = Arrays.asList("000009.XSHE", "000012.XSHE", "000021.XSHE", "000027.XSHE", "000031.XSHE", "000039.XSHE", "000050.XSHE", "000060.XSHE", "000062.XSHE", "000089.XSHE", "000155.XSHE", "000156.XSHE", "000400.XSHE", "000401.XSHE", "000402.XSHE", "000415.XSHE", "000513.XSHE", "000519.XSHE", "000537.XSHE", "000540.XSHE", "000547.XSHE", "000553.XSHE", "000559.XSHE", "000563.XSHE", "000581.XSHE", "000591.XSHE", "000598.XSHE", "000623.XSHE", "000629.XSHE", "000630.XSHE", "000636.XSHE", "000656.XSHE", "000683.XSHE", "000703.XSHE", "000709.XSHE", "000728.XSHE", "000729.XSHE", "000738.XSHE", "000739.XSHE", "000750.XSHE", "000778.XSHE", "000783.XSHE", "000785.XSHE", "000807.XSHE", "000825.XSHE", "000830.XSHE", "000831.XSHE", "000869.XSHE", "000878.XSHE", "000883.XSHE", "000887.XSHE", "000898.XSHE", "000930.XSHE", "000932.XSHE", "000937.XSHE", "000959.XSHE", "000960.XSHE", "000961.XSHE", "000967.XSHE", "000970.XSHE", "000975.XSHE", "000987.XSHE", "000988.XSHE", "000990.XSHE", "000997.XSHE", "000998.XSHE", "000999.XSHE", "001203.XSHE", "001227.XSHE", "001872.XSHE", "001914.XSHE", "002002.XSHE", "002010.XSHE", "002019.XSHE", "002025.XSHE", "002028.XSHE", "002030.XSHE", "002048.XSHE", "002056.XSHE", "002065.XSHE", "002078.XSHE", "002080.XSHE", "002081.XSHE", "002092.XSHE", "002110.XSHE", "002124.XSHE", "002127.XSHE", "002128.XSHE", "002131.XSHE", "002138.XSHE", "002146.XSHE", "002152.XSHE", "002153.XSHE", "002155.XSHE", "002156.XSHE", "002183.XSHE", "002185.XSHE", "002191.XSHE", "002192.XSHE", "002195.XSHE", "002203.XSHE", "002212.XSHE", "002221.XSHE", "002223.XSHE", "002242.XSHE", "002244.XSHE", "002249.XSHE", "002250.XSHE", "002266.XSHE", "002268.XSHE", "002273.XSHE", "002281.XSHE", "002294.XSHE", "002299.XSHE", "002326.XSHE", "002340.XSHE", "002353.XSHE", "002368.XSHE", "002372.XSHE", "002373.XSHE", "002384.XSHE", "002385.XSHE", "002396.XSHE", "002399.XSHE", "002407.XSHE", "002408.XSHE", "002409.XSHE", "002416.XSHE", "002422.XSHE", "002423.XSHE", "002429.XSHE", "002430.XSHE", "002434.XSHE", "002439.XSHE", "002444.XSHE", "002465.XSHE", "002468.XSHE", "002497.XSHE", "002500.XSHE", "002505.XSHE", "002506.XSHE", "002507.XSHE", "002508.XSHE", "002511.XSHE", "002531.XSHE", "002532.XSHE", "002557.XSHE", "002563.XSHE", "002568.XSHE", "002572.XSHE", "002595.XSHE", "002603.XSHE", "002624.XSHE", "002625.XSHE", "002653.XSHE", "002670.XSHE", "002673.XSHE", "002683.XSHE", "002690.XSHE", "002701.XSHE", "002705.XSHE", "002738.XSHE", "002739.XSHE", "002745.XSHE", "002797.XSHE", "002831.XSHE", "002850.XSHE", "002867.XSHE", "002901.XSHE", "002925.XSHE", "002926.XSHE", "002936.XSHE", "002939.XSHE", "002945.XSHE", "002948.XSHE", "002958.XSHE", "002966.XSHE", "002985.XSHE", "003035.XSHE", "300001.XSHE", "300003.XSHE", "300009.XSHE", "300012.XSHE", "300017.XSHE", "300024.XSHE", "300026.XSHE", "300037.XSHE", "300058.XSHE", "300070.XSHE", "300072.XSHE", "300073.XSHE", "300088.XSHE", "300115.XSHE", "300136.XSHE", "300144.XSHE", "300146.XSHE", "300168.XSHE", "300182.XSHE", "300212.XSHE", "300244.XSHE", "300251.XSHE", "300253.XSHE", "300257.XSHE", "300285.XSHE", "300296.XSHE", "300308.XSHE", "300357.XSHE", "300363.XSHE", "300373.XSHE", "300376.XSHE", "300383.XSHE", "300390.XSHE", "300418.XSHE", "300463.XSHE", "300474.XSHE", "300482.XSHE", "300558.XSHE", "300568.XSHE", "300604.XSHE", "300618.XSHE", "300630.XSHE", "300676.XSHE", "300677.XSHE", "300682.XSHE", "300699.XSHE", "300724.XSHE", "300741.XSHE", "300776.XSHE", "300832.XSHE", "300850.XSHE", "300861.XSHE", "300866.XSHE", "300869.XSHE", "300888.XSHE", "301029.XSHE", "600006.XSHG", "600008.XSHG", "600021.XSHG", "600022.XSHG", "600026.XSHG", "600027.XSHG", "600032.XSHG", "600038.XSHG", "600056.XSHG", "600060.XSHG", "600062.XSHG", "600064.XSHG", "600066.XSHG", "600079.XSHG", "600095.XSHG", "600096.XSHG", "600109.XSHG", "600118.XSHG", "600126.XSHG", "600131.XSHG", "600141.XSHG", "600143.XSHG", "600153.XSHG", "600155.XSHG", "600157.XSHG", "600160.XSHG", "600161.XSHG", "600166.XSHG", "600167.XSHG", "600170.XSHG", "600171.XSHG", "600177.XSHG", "600195.XSHG", "600201.XSHG", "600208.XSHG", "600216.XSHG", "600258.XSHG", "600259.XSHG", "600271.XSHG", "600282.XSHG", "600297.XSHG", "600298.XSHG", "600299.XSHG", "600307.XSHG", "600315.XSHG", "600316.XSHG", "600325.XSHG", "600329.XSHG", "600339.XSHG", "600348.XSHG", "600350.XSHG", "600352.XSHG", "600369.XSHG", "600372.XSHG", "600373.XSHG", "600376.XSHG", "600377.XSHG", "600378.XSHG", "600380.XSHG", "600390.XSHG", "600392.XSHG", "600398.XSHG", "600399.XSHG", "600409.XSHG", "600415.XSHG", "600418.XSHG", "600435.XSHG", "600482.XSHG", "600486.XSHG", "600487.XSHG", "600489.XSHG", "600497.XSHG", "600498.XSHG", "600499.XSHG", "600500.XSHG", "600507.XSHG", "600511.XSHG", "600516.XSHG", "600517.XSHG", "600521.XSHG", "600528.XSHG", "600529.XSHG", "600535.XSHG", "600536.XSHG", "600546.XSHG", "600549.XSHG", "600556.XSHG", "600563.XSHG", "600566.XSHG", "600567.XSHG", "600580.XSHG", "600582.XSHG", "600597.XSHG", "600598.XSHG", "600623.XSHG", "600637.XSHG", "600642.XSHG", "600648.XSHG", "600655.XSHG", "600663.XSHG", "600667.XSHG", "600673.XSHG", "600699.XSHG", "600704.XSHG", "600705.XSHG", "600707.XSHG", "600718.XSHG", "600728.XSHG", "600737.XSHG", "600739.XSHG", "600755.XSHG", "600764.XSHG", "600765.XSHG", "600782.XSHG", "600787.XSHG", "600801.XSHG", "600808.XSHG", "600820.XSHG", "600827.XSHG", "600839.XSHG", "600848.XSHG", "600859.XSHG", "600862.XSHG", "600863.XSHG", "600867.XSHG", "600871.XSHG", "600873.XSHG", "600879.XSHG", "600885.XSHG", "600895.XSHG", "600901.XSHG", "600906.XSHG", "600909.XSHG", "600917.XSHG", "600927.XSHG", "600928.XSHG", "600956.XSHG", "600959.XSHG", "600967.XSHG", "600968.XSHG", "600970.XSHG", "600985.XSHG", "600988.XSHG", "600998.XSHG", "601000.XSHG", "601005.XSHG", "601016.XSHG", "601058.XSHG", "601077.XSHG", "601098.XSHG", "601106.XSHG", "601108.XSHG", "601118.XSHG", "601128.XSHG", "601139.XSHG", "601156.XSHG", "601158.XSHG", "601162.XSHG", "601168.XSHG", "601179.XSHG", "601187.XSHG", "601198.XSHG", "601228.XSHG", "601231.XSHG", "601233.XSHG", "601298.XSHG", "601333.XSHG", "601456.XSHG", "601555.XSHG", "601568.XSHG", "601577.XSHG", "601598.XSHG", "601607.XSHG", "601608.XSHG", "601611.XSHG", "601636.XSHG", "601665.XSHG", "601666.XSHG", "601696.XSHG", "601699.XSHG", "601717.XSHG", "601718.XSHG", "601778.XSHG", "601828.XSHG", "601866.XSHG", "601869.XSHG", "601872.XSHG", "601880.XSHG", "601928.XSHG", "601958.XSHG", "601969.XSHG", "601990.XSHG", "601991.XSHG", "601992.XSHG", "601997.XSHG", "603000.XSHG", "603026.XSHG", "603056.XSHG", "603077.XSHG", "603127.XSHG", "603156.XSHG", "603160.XSHG", "603218.XSHG", "603225.XSHG", "603228.XSHG", "603233.XSHG", "603267.XSHG", "603317.XSHG", "603345.XSHG", "603355.XSHG", "603379.XSHG", "603444.XSHG", "603456.XSHG", "603517.XSHG", "603568.XSHG", "603589.XSHG", "603596.XSHG", "603605.XSHG", "603606.XSHG", "603613.XSHG", "603638.XSHG", "603650.XSHG", "603658.XSHG", "603688.XSHG", "603707.XSHG", "603712.XSHG", "603719.XSHG", "603737.XSHG", "603786.XSHG", "603816.XSHG", "603858.XSHG", "603866.XSHG", "603868.XSHG", "603883.XSHG", "603885.XSHG", "603893.XSHG", "603927.XSHG", "603939.XSHG", "605358.XSHG", "688002.XSHG", "688006.XSHG", "688009.XSHG", "688029.XSHG", "688063.XSHG", "688088.XSHG", "688099.XSHG", "688116.XSHG", "688122.XSHG", "688185.XSHG", "688188.XSHG", "688208.XSHG", "688256.XSHG", "688289.XSHG", "688301.XSHG", "688385.XSHG", "688390.XSHG", "688521.XSHG", "688538.XSHG", "688567.XSHG", "688690.XSHG", "688772.XSHG", "688777.XSHG", "688779.XSHG", "688819.XSHG", "689009.XSHG");

    public static List<String> get_CODES_HS300() {
        return CODES_HS300;
    }
    public static List<String> get_CODES_ZZ100() {
        return CODES_ZZ100;
    }
    public static List<String> get_CODES_ZZ500() {
        return CODES_ZZ500;
    }

    public static String get_factor_theme(String Theme){
        //目前只能处理行业龙头
        if(Theme.equals("行业龙头")){
            return  "market_cap";
        } else if (Theme.equals("高股息")) {
            return  "dividend_yield";
        }else if (Theme.equals("高成长")) {
            return  "inc_net_profit_year_on_year";
        }
        else{
            return "";
        }
    }

    //得到标准差
    public static double get_standard_deviation(List<String> factorList) {
        Cal_sta cal = new Cal_sta();
        List<Double> factor_list_double = factorList.stream().map(Double::valueOf).collect(Collectors.toList());
        DecimalFormat two = new DecimalFormat("#.00");
        double standard_deviation = cal.POP_STD_dev(factor_list_double.stream().mapToDouble(i->i).toArray());
        double standard_deviation_two = Double.parseDouble(two.format(standard_deviation));
        return standard_deviation_two;
    }

    //得到方差
    public static double get_variance(List<String> factorList) {
        Cal_sta cal = new Cal_sta();
        List<Double> factor_list_double = factorList.stream().map(Double::valueOf).collect(Collectors.toList());
        DecimalFormat two = new DecimalFormat("#.00");
        double variance = cal.POP_Variance(factor_list_double.stream().mapToDouble(i->i).toArray());
        double variance_two = Double.parseDouble(two.format(variance));
        return variance_two;
    }

    //得到均值
    public static double get_mean(List<String> factorList) {
        Cal_sta cal = new Cal_sta();
        List<Double> factor_list_double = factorList.stream().map(Double::valueOf).collect(Collectors.toList());
        DecimalFormat two = new DecimalFormat("#.00");
        double mean = cal.Mean(factor_list_double.stream().mapToDouble(i->i).toArray());
        double mean_two = Double.parseDouble(two.format(mean));
        return mean_two;
    }
}
